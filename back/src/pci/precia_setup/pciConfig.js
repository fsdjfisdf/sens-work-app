// src/pci/integer_setup/pciConfig.js

/** 인정 장비 타입 */
exports.ALLOWED_EQUIP_TYPES = [
  "INTEGER", "INTEGER+", "INTEGER PLUS", "INTEGER PLUS+", "INTEGER Plus"
];

const strip = (s) => (s ?? "").toString().trim();
const upper = (s) => strip(s).toUpperCase();
const canon = (s) =>
  upper(s)
    .replace(/ASS'Y/g, "ASSY")
    .replace(/_/g, " ")
    .replace(/-/g, " ")
    .replace(/[^\p{L}\p{N} ]/gu, "")
    .replace(/\s+/g, " ")
    .trim();
exports.canon = canon;

/** 기준 작업 수 */
exports.BASELINE = {
  "INSTALLATION PREPARATION": 5,
  "FAB IN": 5,
  "DOCKING": 10,
  "CABLE HOOK UP": 10,
  "POWER TURN ON": 10,
  "UTILITY TURN ON": 5,
  "GAS TURN ON": 5,
  "TEACHING": 15,
  "PART INSTALLATION": 5,
  "LEAK CHECK": 5,
  "TTTM": 15,
  "CUSTOMER CERTIFICATION": 10,
  "PROCESS CONFIRM": 3,
};

/** 표기 보정 */
const ALIASES = {
  "INSTALLATION PREPERATION": "INSTALLATION PREPARATION",
  "FABIN": "FAB IN",
  "CABLE HOOKUP": "CABLE HOOK UP",
  // 소항목 보정(대표 예)
  "EQUIPMENT CLEARANCE CHECK": "EQUIPMENT_CLEARANCE_CHECK",
  "GRATING OPENING CHECK": "GRATING_OPENING_CHECK",
  "PACKING LIST VERIFICATION": "PACKING_LIST_VERIFICATION",
  "IMPORT COMPANY CAUTION": "IMPORT_COMPANY_CAUTION",
  "IMPORT INSPECTION POINTS": "IMPORT_INSPECTION_POINTS",
  "PROHIBITED ITEMS IMPORT": "PROHIBITED_ITEMS_IMPORT",
  "RACK ELCB MCB UNDERSTANDING": "RACK_ELCB_MCB_UNDERSTANDING",
  "MODULE MCB TURN ON": "MODULE_MCB_TURN_ON",
  "SYCON TROUBLESHOOTING": "SYCON_TROUBLESHOOTING",
  "IP ADDRESS CHANGE": "IP_ADDRESS_CHANGE",
  "SETUP INI MODIFICATION": "SETUP_INI_MODIFICATION",
  "DILLUTION SIGNAL CHECK": "DILLUTION_SIGNAL_CHECK",
  "CHILLER HEAT EXCHANGER TURN ON": "CHILLER_HEAT_EXCHANGER_TURN_ON",
  "CHILLER HEAT EXCHANGER CHECK": "CHILLER_HEAT_EXCHANGER_CHECK",
};

exports.toDisplayCategory = (raw) => {
  const s = upper(raw).replace(/_/g, " ").trim();
  const via = ALIASES[s] || s;
  const keys = Object.keys(exports.BASELINE);
  const hit = keys.find((k) => canon(k) === canon(via));
  return hit || via;
};

/** 컨트롤러 호환용: 카테고리 정규화 */
exports.normalizeItem = (raw) => exports.toDisplayCategory(raw);

/** 컬럼 키 정규화(소항목) */
exports.normalizeKey = (raw) => {
  if (!raw) return "";
  const s = upper(raw).replace(/\s+/g, " ").trim();
  const via = ALIASES[s] || s;
  return via.replace(/ /g, "_");
};

exports.workerAliases = (name) =>
  (name || "").replace(/\(.*?\)/g, "").trim().replace(/\s+/g, " ");

/** 카테고리 → 소항목(=INTEGER_SETUP 컬럼들) */
exports.CATEGORY_ITEMS = {
  INSTALLATION_PREPARATION: [
    "CUSTOMER_OHT_LINE_CHECK",
    "EQUIPMENT_CLEARANCE_CHECK",
    "DRAWING_TEMPLATE_SETUP",
    "DRAWING_TEMPLATE_MARKING",
    "UTILITY_SPEC_UNDERSTANDING",
  ],
  FAB_IN: [
    "EQUIPMENT_IMPORT_ORDER",
    "IMPORT_COMPANY_CAUTION",
    "IMPORT_INSPECTION_POINTS",
    "PROHIBITED_ITEMS_IMPORT",
    "GRATING_OPENING_CHECK",
    "PACKING_LIST_VERIFICATION",
  ],
  DOCKING: [
    "TOOL_SIZE_UNDERSTANDING",
    "LASER_JIG_ALIGNMENT",
    "LIFT_CASTER_REMOVAL",
    "MODULE_HEIGHT_DOCKING",
    "MODULE_DOCKING",
    "DOCKING_REALIGNMENT",
    "LEVELER_POSITION_UNDERSTANDING",
    "MODULE_LEVELING",
    "DOCKING_PIN_POSITION",
    "HOOK_UP",
  ],
  CABLE_HOOK_UP: [
    "TRAY_CHECK",
    "CABLE_SORTING",
    "GRATING_OPEN_CAUTION",
    "LADDER_SAFETY_RULES",
    "CABLE_INSTALLATION",
    "CABLE_CONNECTION",
    "CABLE_TRAY_ARRANGEMENT",
    "CABLE_CUTTING",
    "CABLE_RACK_CONNECTION",
    "PUMP_CABLE_TRAY",
    "PUMP_CABLE_ARRANGEMENT",
    "CABLE_PM_PUMP_CONNECTION",
  ],
  POWER_TURN_ON: [
    "GPS_UPS_SPS_UNDERSTANDING",
    "POWER_TURN_ON_SEQUENCE",
    "RACK_ELCB_MCB_UNDERSTANDING",
    "SAFETY_MODULE_UNDERSTANDING",
    "EMO_CHECK",
    "MODULE_MCB_TURN_ON",
    "SYCON_NUMBER_UNDERSTANDING",
    "SYCON_TROUBLESHOOTING",
    "POWER_TURN_ON_ALARM_TROUBLESHOOTING",
    "CHECKLIST_COMPLETION",
    "IP_ADDRESS_CHANGE",
  ],
  UTILITY_TURN_ON: [
    "UTILITY_TURN_ON_PRECHECK",
    "SETUP_INI_MODIFICATION",
    "UTILITY_TURN_ON_SEQUENCE",
    "VACUUM_TURN_ON",
    "CDA_TURN_ON",
    "PCW_TURN_ON",
    "SOLANOID_VALVE_LOCATION",
    "RELIEF_VALVE_LOCATION",
    "MANUAL_VALVE_LOCATION",
    "PUMP_TURN_ON",
    "PURGE_N2_TURN_ON",
    "DILLUTION_SIGNAL_CHECK",
    "CHILLER_HEAT_EXCHANGER_TURN_ON",
    "CHILLER_HEAT_EXCHANGER_CHECK",
    "MANOMETER_LIMIT_ADJUST",
  ],
  GAS_TURN_ON: [
    "GAS_TURN_ON_PRECHECK",
    "NF3_LINE_LEAK_CHECK",
    "H2_LINE_LEAK_CHECK",
    "NF3_TURN_ON",
    "H2_TURN_ON",
    "GAS_TURN_ON_CHECK",
    "GAS_TURN_ON_CAUTION",
    "PM_DILLUTION_TEST",
    "GAS_TURN_ON_CONFIRM",
  ],
  TEACHING: [
    "EFEM_ROBOT_PENDANT_CONTROL",
    "EFEM_ROBOT_XYZ_VALUES",
    "EFEM_ROBOT_PARAMETER_EDIT",
    "EFEM_TEACHING_DATA_SAVE",
    "TM_ROBOT_PENDANT_CONTROL",
    "TM_ROBOT_LEVELING",
    "TM_ROBOT_XYZ_VALUES",
    "TM_ROBOT_PM_TEACHING",
    "TM_ROBOT_AM_TEACHING",
    "TM_TEACHING_DATA_SAVE",
    "WAFER_JIG_USE",
    "LASER_JIG_USE",
    "MARGIN_CHECK",
    "SEMI_AUTO_TRANSFER",
    "AGING_TEST",
  ],
  PART_INSTALLATION: [
    "CERAMIC_PLATE_PIN_INSTALLATION",
    "PIN_HEIGHT_ADJUST",
    "PIO_SENSOR_INSTALLATION",
    "VIEW_PORT_COVER_INSTALLATION",
    "LOAD_LOCK_LEVELING",
    "TM_ROBOT_PICK_INSTALLATION",
    "TM_ROBOT_PICK_LEVELING",
    "GAS_BOX_WINDOW_INSTALLATION",
    "GAS_BOX_DAMPER_INSTALLATION",
  ],
  LEAK_CHECK: [
    "LINE_MANUAL_LEAK_CHECK",
    "MANUAL_LEAK_CHECK_HISTORY",
    "HE_DETECTOR_USE",
    "HE_BOTTLE_ORDER",
    "HE_DETECTOR_HOUSING_LEAK_CHECK",
    "SLOT_VALVE_HE_LEAK_CHECK",
  ],
  TTTM: [
    "VAC_CDA_SPEC_ADJUST",
    "TEMP_PROFILE",
    "PUMP_VENT_TIME_ADJUST",
    "EPD_PEAK_OFFSET_ADJUST",
    "PM_BAFFLE_TEMP_AUTOTUNE",
    "DOOR_VALVE_CONTROL",
    "APC_AUTOLEARN",
    "PIN_HEIGHT_ADJUST_B",
    "GAS_SUPPLY_PRESSURE_CHECK",
    "GAS_EXHAUST_MONAMETER_CONTROL",
    "MFC_HUNTING_CHECK",
    "LP_FLOW_CONTROL",
    "AICP_POWER_CAL",
    "PRODUCT_REPORT_COMPLETION",
    "TTTM_SHEET_COMPLETION",
  ],
  CUSTOMER_CERTIFICATION: [
    "LP_CERTIFICATION",
    "FULL_PUMPING",
    "MID_OPERATION_CERTIFICATION_PREP",
    "LABEL_PLACEMENT",
    "I_MARKING_PROCEDURE",
    "I_MARKING_LOCATION",
    "GAS_BOX_BOARD_LEVELING",
    "ENVIRONMENTAL_QUAL_TEST",
    "OHT_AUTO_TRANSFER_CERTIFICATION",
  ],
  PROCESS_CONFIRM: ["PARTICLE_TEST", "EA_TEST"],
};

/** DAO에서 쓰는: 카테고리로 체크리스트 키 배열 얻기 */
exports.getChecklistKeysForCategory = (catDisplay) => {
  const disp = exports.toDisplayCategory(catDisplay);
  const key = Object.keys(exports.CATEGORY_ITEMS).find(
    (k) => canon(k) === canon(disp)
  );
  return key ? exports.CATEGORY_ITEMS[key] : [];
};

/** 소항목 설명(툴팁/모달) */
exports.CHECK_TITLES = {
  // ... (이전 답변에 준 동일 내용 그대로 유지)
};
